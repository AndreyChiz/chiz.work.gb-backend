pipeline {
    agent any  // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ agent { docker { image 'python:3.12-alpine' } }

    environment {
        APP_NAME = 'my_app'
        DOCKER_IMAGE = "myrepo/${APP_NAME}:${env.BUILD_NUMBER}"
    }

    options {
        timestamps()        // –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∫ –ª–æ–≥–∞–º
        ansiColor('xterm')  // –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
        skipStagesAfterUnstable()
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...'
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo 'üîß –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç...'
                sh '''
                    docker build -t $DOCKER_IMAGE .
                '''
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...'
                sh '''
                    docker run --rm $DOCKER_IMAGE pytest -v || exit 1
                '''
            }
        }

        stage('Push Image') {
            when {
                branch 'main'
            }
            steps {
                echo 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ Docker Registry...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $DOCKER_IMAGE
                    '''
                }
            }
        }

        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                echo 'üöÄ –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...'
                sh '''
                    docker compose down
                    docker compose up -d
                '''
            }
        }
    }

    post {
        success {
            echo "‚úÖ –°–±–æ—Ä–∫–∞ #${env.BUILD_NUMBER} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        }
        failure {
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ #${env.BUILD_NUMBER}"
        }
    }
}
